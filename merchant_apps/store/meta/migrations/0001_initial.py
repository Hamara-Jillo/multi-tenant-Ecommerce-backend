# Generated by Django 3.2 on 2025-06-12 11:05

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('merchant', '0001_initial'),
        ('catalogue', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, default='My Store', error_messages={'blank': 'Store name cannot be blank.', 'null': 'Store name cannot be null.', 'unique': 'A store with this name already exists.'}, help_text='Official name of the store', max_length=255, unique=True, verbose_name='Store Name')),
                ('slug', models.SlugField(help_text='URL-friendly identifier', max_length=255, unique=True, verbose_name='Store Slug')),
                ('auto_create_admin', models.BooleanField(default=True, help_text='Automatically create admin user for this store')),
                ('legal_business_name', models.CharField(blank=True, max_length=255, verbose_name='Legal Business Name')),
                ('primary_domain', models.CharField(blank=True, max_length=255, validators=[django.core.validators.URLValidator()], verbose_name='Primary Domain')),
                ('contact_email', models.EmailField(blank=True, max_length=254, verbose_name='Contact Email')),
                ('contact_phone', models.CharField(blank=True, max_length=20, verbose_name='Contact Phone')),
                ('address_line1', models.CharField(blank=True, max_length=255, verbose_name='Address Line 1')),
                ('address_line2', models.CharField(blank=True, max_length=255, verbose_name='Address Line 2')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('state_province', models.CharField(blank=True, max_length=100, verbose_name='State/Province')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='Postal/Zip Code')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, verbose_name='Country')),
                ('timezone', models.CharField(default='UTC', max_length=50, verbose_name='Timezone')),
                ('default_currency', models.CharField(default='USD', max_length=3, verbose_name='Default Currency')),
                ('weight_unit', models.CharField(choices=[('kg', 'Kilograms (kg)'), ('lb', 'Pounds (lb)')], default='kg', max_length=10, verbose_name='Weight Unit')),
                ('dimension_unit', models.CharField(choices=[('cm', 'Centimeters (cm)'), ('in', 'Inches (in)')], default='cm', max_length=10, verbose_name='Dimension Unit')),
                ('order_id_prefix', models.CharField(blank=True, max_length=10, verbose_name='Order ID Prefix')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active Status')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('password_protected', models.BooleanField(default=False, verbose_name='Password Protected')),
                ('store_password', models.CharField(blank=True, max_length=100, verbose_name='Store Password')),
                ('is_primary_store', models.BooleanField(default=False, verbose_name='Is Primary Store')),
                ('organization_id', models.CharField(blank=True, max_length=100, verbose_name='Organization ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Store',
                'verbose_name_plural': 'Stores',
                'db_table': 'store_meta_store',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ShippingZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Zone Name')),
                ('countries', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2), size=None, verbose_name='Countries')),
                ('is_default', models.BooleanField(default=False, verbose_name='Is Default Zone')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shipping_zones', to='store_meta.store')),
            ],
            options={
                'verbose_name': 'Shipping Zone',
                'verbose_name_plural': 'Shipping Zones',
            },
        ),
        migrations.CreateModel(
            name='ShippingMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Method Name')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('method_type', models.CharField(choices=[('flat', 'Flat Rate'), ('weight', 'Weight Based'), ('price', 'Price Based'), ('carrier', 'Carrier Calculated')], max_length=20, verbose_name='Method Type')),
                ('min_order_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Minimum Order Price')),
                ('max_order_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Maximum Order Price')),
                ('min_weight', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Minimum Weight')),
                ('max_weight', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Maximum Weight')),
                ('carrier_name', models.CharField(blank=True, max_length=100, verbose_name='Carrier Name')),
                ('carrier_account_id', models.CharField(blank=True, max_length=100, verbose_name='Carrier Account ID')),
                ('delivery_estimate_min', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Delivery Est. Min Days')),
                ('delivery_estimate_max', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Delivery Est. Max Days')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('shipping_zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shipping_methods', to='store_meta.shippingzone')),
            ],
            options={
                'verbose_name': 'Shipping Method',
                'verbose_name_plural': 'Shipping Methods',
            },
        ),
        migrations.CreateModel(
            name='SEOSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('homepage_title', models.CharField(blank=True, max_length=255, verbose_name='Homepage Title')),
                ('homepage_meta_description', models.TextField(blank=True, verbose_name='Homepage Meta Description')),
                ('social_sharing_image', models.ImageField(blank=True, null=True, upload_to='seo_images/', verbose_name='Social Sharing Image')),
                ('robots_txt', models.TextField(blank=True, verbose_name='Robots.txt Content')),
                ('custom_head_scripts', models.TextField(blank=True, verbose_name='Custom Head Scripts')),
                ('enable_sitemap', models.BooleanField(default=True, verbose_name='Enable Sitemap')),
                ('store', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='seo_settings', to='store_meta.store')),
            ],
            options={
                'verbose_name': 'SEO Settings',
                'verbose_name_plural': 'SEO Settings',
            },
        ),
        migrations.CreateModel(
            name='PaymentSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_enabled', models.BooleanField(default=False, verbose_name='Stripe Enabled')),
                ('stripe_api_key', models.CharField(blank=True, max_length=255, verbose_name='Stripe API Key')),
                ('stripe_public_key', models.CharField(blank=True, max_length=255, verbose_name='Stripe Public Key')),
                ('paypal_enabled', models.BooleanField(default=False, verbose_name='PayPal Enabled')),
                ('paypal_client_id', models.CharField(blank=True, max_length=255, verbose_name='PayPal Client ID')),
                ('paypal_secret', models.CharField(blank=True, max_length=255, verbose_name='PayPal Secret')),
                ('allow_credit_cards', models.BooleanField(default=True, verbose_name='Allow Credit Cards')),
                ('accepted_card_brands', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20), blank=True, default=list, size=None, verbose_name='Accepted Card Brands')),
                ('apple_pay_enabled', models.BooleanField(default=False, verbose_name='Apple Pay Enabled')),
                ('google_pay_enabled', models.BooleanField(default=False, verbose_name='Google Pay Enabled')),
                ('bank_transfer_enabled', models.BooleanField(default=False, verbose_name='Bank Transfer Enabled')),
                ('bank_transfer_instructions', models.TextField(blank=True, verbose_name='Bank Transfer Instructions')),
                ('cash_on_delivery_enabled', models.BooleanField(default=False, verbose_name='Cash on Delivery Enabled')),
                ('cash_on_delivery_instructions', models.TextField(blank=True, verbose_name='Cash on Delivery Instructions')),
                ('multi_currency_enabled', models.BooleanField(default=False, verbose_name='Multi-Currency Support')),
                ('installments_enabled', models.BooleanField(default=False, verbose_name='Installments Enabled')),
                ('fraud_prevention_enabled', models.BooleanField(default=False, verbose_name='Fraud Prevention Enabled')),
                ('cvv_required', models.BooleanField(default=True, verbose_name='CVV Required')),
                ('store', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment_settings', to='store_meta.store')),
            ],
            options={
                'verbose_name': 'Payment Settings',
                'verbose_name_plural': 'Payment Settings',
            },
        ),
        migrations.CreateModel(
            name='Market',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Market Name')),
                ('countries', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2), size=None, verbose_name='Countries')),
                ('base_currency', models.CharField(max_length=3, verbose_name='Base Currency')),
                ('enabled_currencies', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=3), blank=True, default=list, size=None, verbose_name='Enabled Currencies')),
                ('enabled_languages', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), blank=True, default=list, size=None, verbose_name='Enabled Languages')),
                ('price_adjustment_type', models.CharField(blank=True, choices=[('percentage', 'Percentage'), ('fixed', 'Fixed Amount')], max_length=20, verbose_name='Price Adjustment Type')),
                ('price_adjustment_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Price Adjustment Value')),
                ('domain', models.CharField(blank=True, max_length=255, verbose_name='Market Domain')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='markets', to='store_meta.store')),
            ],
            options={
                'verbose_name': 'Market',
                'verbose_name_plural': 'Markets',
            },
        ),
        migrations.CreateModel(
            name='BusinessSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tax_number', models.CharField(blank=True, max_length=50, verbose_name='Tax Registration Number')),
                ('include_tax_in_prices', models.BooleanField(default=False, verbose_name='Include Tax in Prices')),
                ('charge_tax_on_shipping', models.BooleanField(default=False, verbose_name='Charge Tax on Shipping')),
                ('payment_capture_mode', models.CharField(choices=[('auto', 'Automatic'), ('manual', 'Manual')], default='auto', max_length=20, verbose_name='Payment Capture Mode')),
                ('auto_fulfill_orders', models.BooleanField(default=False, verbose_name='Auto-Fulfill Orders')),
                ('auto_archive_orders', models.BooleanField(default=False, verbose_name='Auto-Archive Orders')),
                ('fulfillment_origin_address', models.CharField(blank=True, max_length=255, verbose_name='Fulfillment Origin Address')),
                ('customer_accounts_required', models.BooleanField(default=False, verbose_name='Customer Accounts Required')),
                ('notification_email', models.EmailField(blank=True, max_length=254, verbose_name='Notification Email')),
                ('default_marketing_opt_in', models.BooleanField(default=False, verbose_name='Default Marketing Opt-in')),
                ('google_analytics_id', models.CharField(blank=True, max_length=50, verbose_name='Google Analytics ID')),
                ('facebook_pixel_id', models.CharField(blank=True, max_length=50, verbose_name='Facebook Pixel ID')),
                ('refund_policy', models.TextField(blank=True, verbose_name='Refund Policy')),
                ('privacy_policy', models.TextField(blank=True, verbose_name='Privacy Policy')),
                ('terms_of_service', models.TextField(blank=True, verbose_name='Terms of Service')),
                ('store', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='business_settings', to='store_meta.store')),
            ],
            options={
                'verbose_name': 'Business Settings',
                'verbose_name_plural': 'Business Settings',
            },
        ),
        migrations.CreateModel(
            name='BrandingSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='shop_logos/', verbose_name='Logo')),
                ('logo_alt_text', models.CharField(blank=True, max_length=100, verbose_name='Logo Alt Text')),
                ('favicon', models.ImageField(blank=True, null=True, upload_to='shop_favicons/', verbose_name='Favicon')),
                ('theme_id', models.CharField(blank=True, max_length=100, verbose_name='Theme ID')),
                ('primary_color', models.CharField(default='#000000', max_length=7, verbose_name='Primary Color')),
                ('secondary_color', models.CharField(default='#ffffff', max_length=7, verbose_name='Secondary Color')),
                ('accent_color', models.CharField(default='#0000ff', max_length=7, verbose_name='Accent Color')),
                ('text_color', models.CharField(default='#000000', max_length=7, verbose_name='Text Color')),
                ('background_color', models.CharField(default='#ffffff', max_length=7, verbose_name='Background Color')),
                ('button_color', models.CharField(default='#0000ff', max_length=7, verbose_name='Button Color')),
                ('heading_font', models.CharField(default='Helvetica', max_length=50, verbose_name='Heading Font')),
                ('body_font', models.CharField(default='Arial', max_length=50, verbose_name='Body Font')),
                ('base_font_size', models.PositiveSmallIntegerField(default=16, verbose_name='Base Font Size')),
                ('header_layout', models.CharField(choices=[('centered', 'Centered'), ('left_aligned', 'Left Aligned')], default='centered', max_length=50, verbose_name='Header Layout')),
                ('sticky_header', models.BooleanField(default=False, verbose_name='Sticky Header')),
                ('announcement_bar_text', models.CharField(blank=True, max_length=255, verbose_name='Announcement Bar Text')),
                ('brand_headline', models.CharField(blank=True, max_length=255, verbose_name='Brand Headline')),
                ('brand_description', models.TextField(blank=True, verbose_name='Brand Description')),
                ('facebook_url', models.URLField(blank=True, verbose_name='Facebook URL')),
                ('instagram_url', models.URLField(blank=True, verbose_name='Instagram URL')),
                ('twitter_url', models.URLField(blank=True, verbose_name='Twitter URL')),
                ('youtube_url', models.URLField(blank=True, verbose_name='YouTube URL')),
                ('tiktok_url', models.URLField(blank=True, verbose_name='TikTok URL')),
                ('copyright_text', models.CharField(blank=True, max_length=255, verbose_name='Copyright Text')),
                ('footer_show_newsletter', models.BooleanField(default=True, verbose_name='Show Newsletter in Footer')),
                ('custom_css', models.TextField(blank=True, verbose_name='Custom CSS')),
                ('store', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='branding', to='store_meta.store')),
            ],
            options={
                'verbose_name': 'Branding Settings',
                'verbose_name_plural': 'Branding Settings',
            },
        ),
        migrations.CreateModel(
            name='TaxSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', django_countries.fields.CountryField(max_length=2, verbose_name='Country')),
                ('state_province', models.CharField(blank=True, max_length=100, verbose_name='State/Province')),
                ('tax_registration_number', models.CharField(blank=True, max_length=100, verbose_name='Tax Registration Number')),
                ('tax_rate', models.DecimalField(decimal_places=2, help_text='Percentage', max_digits=5, verbose_name='Tax Rate')),
                ('product_type_overrides', models.JSONField(blank=True, default=dict, verbose_name='Product Type Tax Overrides')),
                ('use_automatic_tax', models.BooleanField(default=False, verbose_name='Use Automatic Tax Calculation')),
                ('tax_provider', models.CharField(blank=True, choices=[('avalara', 'Avalara'), ('taxjar', 'TaxJar')], max_length=50, verbose_name='Tax Provider')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tax_settings', to='store_meta.store')),
            ],
            options={
                'verbose_name': 'Tax Setting',
                'verbose_name_plural': 'Tax Settings',
                'unique_together': {('store', 'country', 'state_province')},
            },
        ),
        migrations.CreateModel(
            name='StoreProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='Sort Order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_products', to='catalogue.product')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_products', to='store_meta.store')),
            ],
            options={
                'verbose_name': 'Store Product',
                'verbose_name_plural': 'Store Products',
                'unique_together': {('store', 'product')},
            },
        ),
        migrations.CreateModel(
            name='StorePermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('access_level', models.CharField(choices=[('read', 'Read Only'), ('write', 'Read/Write'), ('admin', 'Full Admin')], default='read', max_length=20)),
                ('merchant', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='merchant.merchant', verbose_name='Merchant')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store_meta.store', verbose_name='Store')),
            ],
            options={
                'verbose_name': 'Store Access Permission',
                'verbose_name_plural': 'Store Access Permissions',
                'db_table': 'store_meta_storepermission',
                'unique_together': {('merchant', 'store')},
            },
        ),
    ]
