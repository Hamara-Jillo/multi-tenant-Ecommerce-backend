"""
Django settings for multistore project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from oscar.defaults import *
from datetime import timedelta
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-gf(3ug38a&!wn8ttgh_d$rc!=+1yqh$rcvokgd#&i#%*x2aey3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django_tenants',
    'public_apps.merchant.apps.MerchantConfig',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    


]

SHARED_APPS = [
    'django_tenants', 
    'public_apps.merchant',
    'public_apps.user.apps.UserConfig',  # User app is only in TENANT_APPS
    'merchant_apps.store.meta.apps.StoreMetaConfig',  # Move to SHARED_APPS since it's needed by other shared apps
    'public_apps.auth.apps.AuthConfig',  # Authentication app for JWT and OAuth

    'django.contrib.admin',
    'django.contrib.auth',
    'polymorphic',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  
    'django.contrib.flatpages',


    # Oscar dependencies (SHARED)
    'django_countries',  # Must come before address
    'widget_tweaks',
    'haystack',
    'treebeard',
    'sorl.thumbnail',
    'django_tables2',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    #  'rest_framework_swagger',
    
    
    # Core apps in dependency order
    'merchant_apps.store.address.apps.AddressConfig',  # Address must come before partner
    'merchant_apps.store.catalogue.apps.CatalogueConfig',  # Catalogue must come before partner
    'merchant_apps.store.partner.apps.PartnerConfig',  # Partner depends on address and catalogue
]

TENANT_APPS = [
    'django.contrib.auth',
    'django.contrib.admin',  # Moved here
    'django.contrib.sessions',
    'django.contrib.messages',
    'public_apps.user.apps.UserConfig',  # User app with User model
    
    # Oscar core apps (TENANT-SPECIFIC)
    # 'oscar.config.Shop',
    # 'oscar.apps.voucher',  # Keep this!
    'merchant_apps.store.analytics.apps.AnalyticsConfig',
    'merchant_apps.store.checkout.apps.CheckoutConfig',
    'merchant_apps.store.shipping.apps.ShippingConfig',
    'merchant_apps.store.communication.apps.CommunicationConfig',
    'merchant_apps.store.catalogue.reviews.apps.CatalogueReviewsConfig',
    'merchant_apps.store.basket.apps.BasketConfig',
    'merchant_apps.store.order.apps.OrderConfig',
    'merchant_apps.store.payment.apps.PaymentConfig',
    'merchant_apps.store.offer.apps.OfferConfig',
    'merchant_apps.store.customer.apps.CustomerConfig',
    'merchant_apps.store.search.apps.SearchConfig',
    'merchant_apps.store.voucher.apps.VoucherConfig',
    'merchant_apps.store.wishlists.apps.WishlistsConfig',

   

    # Oscar dashboard apps
    # 'oscar.apps.dashboard.apps.DashboardConfig',
    # 'oscar.apps.dashboard.reports.apps.ReportsDashboardConfig',
    # 'oscar.apps.dashboard.users.apps.UsersDashboardConfig',
    # 'oscar.apps.dashboard.orders.apps.OrdersDashboardConfig',
    # 'oscar.apps.dashboard.catalogue.apps.CatalogueDashboardConfig',
    # 'oscar.apps.dashboard.offers.apps.OffersDashboardConfig',
    # 'oscar.apps.dashboard.partners.apps.PartnersDashboardConfig',
    # 'oscar.apps.dashboard.pages.apps.PagesDashboardConfig',
    # 'oscar.apps.dashboard.ranges.apps.RangesDashboardConfig',
    # 'oscar.apps.dashboard.reviews.apps.ReviewsDashboardConfig',
    # 'oscar.apps.dashboard.vouchers.apps.VouchersDashboardConfig',
    # 'oscar.apps.dashboard.communications.apps.CommunicationsDashboardConfig',
    # 'oscar.apps.dashboard.shipping.apps.ShippingDashboardConfig',
    
   
   
    
    ]


OSCAR_CORE_APPS = [
    'merchant_apps.store.analytics.apps.AnalyticsConfig',
    'merchant_apps.store.checkout.apps.CheckoutConfig',
    'merchant_apps.store.address.apps.AddressConfig',
    'merchant_apps.store.shipping.apps.ShippingConfig',
    'merchant_apps.store.catalogue.apps.CatalogueConfig',
    'merchant_apps.store.communication.apps.CommunicationConfig',
    'merchant_apps.store.catalogue.reviews.apps.CatalogueReviewsConfig',
    'merchant_apps.store.partner.apps.PartnerConfig',
    'merchant_apps.store.basket.apps.BasketConfig',
    'merchant_apps.store.payment.apps.PaymentConfig',
    'merchant_apps.store.offer.apps.OfferConfig',
    'merchant_apps.store.order.apps.OrderConfig',
    'merchant_apps.store.customer.apps.CustomerConfig',
    'merchant_apps.store.search.apps.SearchConfig',
    'merchant_apps.store.voucher.apps.VoucherConfig',
    'merchant_apps.store.wishlists.apps.WishlistsConfig',
]


INSTALLED_APPS = list(dict.fromkeys(SHARED_APPS + [
    app for app in TENANT_APPS 
    if app not in SHARED_APPS
]))

MIDDLEWARE = [
    'django_tenants.middleware.main.TenantMainMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Must come before TenantAdminMiddleware
    'core.middleware.jwt_tenant.JWTTenantMiddleware', 
    'oscar.apps.basket.middleware.BasketMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'core.middleware.current_user.CurrentMerchantUserMiddleware', 
    'core.middleware.merchant_admin.MerchantAdminMiddleware',
    'core.middleware.merchant_isolation.MerchantIsolationMiddleware',
    'core.middleware.admin_access.AdminAccessMiddleware',
    'core.middleware.order_creator.OrderCreatorMiddleware',
    'core.middleware.cors.CorsMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "https://example.com",
    "https://sub.example.com",
    "http://localhost:4200",
    "http://127.0.0.1:8000",
]

CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://\w+\.example\.com$",
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True
CORS_URLS_REGEX = r"^/.*$"
CSRF_TRUSTED_ORIGINS = ['http://localhost:4200']


CORS_ALLOW_METHODS = (
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
)

CORS_ALLOW_HEADERS = (
    "accept",
    "authorization",
    "content-type",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
)

AUTH_USER_MODEL = 'user.User'
TENANT_MODEL = 'merchant.Merchant'
TENANT_DOMAIN_MODEL = 'merchant.Domain' 
ROOT_URLCONF = 'multistore.urls'
SITE_ID = 1



TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.tenant_admin.tenant_admin',

                'oscar.apps.search.context_processors.search_form',
                'oscar.apps.checkout.context_processors.checkout',
                # 'oscar.apps.communication.notifications.context_processors.notifications',
                'oscar.core.context_processors.metadata'
            ],
        },
    },
]


# Add Oscar shipping configuration
from django.utils.translation import gettext_lazy as _
OSCAR_DASHBOARD_NAVIGATION = [
    {
        'label': _('Shipping'),
        'icon': 'icon-truck',
        'children': [
            {
                'label': _('Shipping Methods'),
                'url_name': 'dashboard:shipping-method-list',
            },
        ]
    },
]


WSGI_APPLICATION = 'multistore.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django_tenants.postgresql_backend',
        'NAME': 'multistore',
        'USER': 'admin',
        'PASSWORD': 'securepassword123',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    },
    'OPTIONS': { 
        'options': '-c timezone=UTC' 
    }
}
DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = (
    # 'public_apps.user.authentication.backends.TenantAwareAuthBackend'
    # 'oscar.apps.customer.auth_backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
)

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.simple_backend.SimpleEngine',
    },
}

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.solr_backend.SolrEngine',
        'URL': 'http://127.0.0.1:8983/solr',
        'INCLUDE_SPELLING': True,
    },
}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',  # Keep for browsable API
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',  # Keep for development
    ]
}

OSCAR_OVERRIDE_MODULES = [
    'offer',  # Tell Oscar to use your custom offer app
    # Add other overridden modules here
]

OSCAR_ADDRESS_MODEL = 'address.Address'
OSCAR_VOUCHER_MODEL = 'voucher.Voucher'
OSCAR_PRODUCT_MODEL = 'catalogue.Product'
OSCAR_INITIAL_ORDER_STATUS = 'Pending'
OSCAR_INITIAL_LINE_STATUS = 'Pending'
OSCAR_ORDER_STATUS_PIPELINE = {
    'Pending': ('Being processed', 'Cancelled',),
    'Being processed': ('Complete', 'Cancelled',),
    'Cancelled': (),
    'Complete': (),
}
OSCAR_CHECKOUT_VIEWS = 'merchant_apps.store.checkout.views'
CHECKOUT_ALLOW_GUEST = True  # Can be tenant-configurable later
OSCAR_OFFER_APPLICATOR = 'merchant_apps.store.offer.applicator.Applicator'
PAYMENT_GATEWAYS = {
    'default': {
        'stripe': {
            'public_key': 'tenant_stripe_key',
            'secret_key': 'tenant_stripe_secret',
        }
    }
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'TOKEN_TYPE_CLAIM': 'token_type',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM': 'jti',

    # Custom claims for tenant-aware authentication
    'USER_ROLE_CLAIM': 'role',
    'TENANT_SCHEMA_CLAIM': 'schema_name',
    'STORE_ID_CLAIM': 'store_id',
}
# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ALLOWED_HOSTS = ['.localhost', '127.0.0.1']
ALLOWED_HOSTS = ['*']  # For development only

import os

# Create logs directory path relative to BASE_DIR
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOGS_DIR, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[{levelname}] {asctime} - {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'detailed': {
            'format': '''
------------------------------------------------------------------------------
Time: {asctime}
Level: {levelname}
Module: {module}
Message: {message}
------------------------------------------------------------------------------''',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            # 'formatter': 'simple',
            'level': 'INFO',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'debug.log'),
            'formatter': 'detailed',
            'level': 'DEBUG',
        },
        'tenant_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'tenant.log'),
            'formatter': 'detailed',
            'level': 'DEBUG',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'public_apps.merchant': {
            'handlers': ['console', 'tenant_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
         'merchant_apps.store.meta': {
            'handlers': ['console', 'tenant_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'tenant_admin': {
            'handlers': ['console', 'tenant_file'],
            'level': 'DEBUG',
            'propagate': False,
        }
    },
}